#include <cstdlib>
#include <ctime>
#include <iostream>
#include <windows.h>
#include <vector>
#include <string>
#include <fstream>
using namespace std;
int MapW,MapH;
int fileScore = 0;

char Map[100][100]=   {" ________________________________________________________________ ",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                       @                        |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|                                                                |",
                       "|________________________________________________________________|"};
struct snakeBlock{
    int x,y;
};

void gotoxy(int *xptr, int *yptr) //Set snake location and snake color
{
  COORD coord={*xptr,*yptr};
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 5);
  SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}



void drawMap(vector <snakeBlock>snake)  // Draw the map, snake, and apple
{
    MapH=0;
    system("cls");
    system("Color 0e");
    for (int i=0;Map[i][0];i++)
    {
        MapW=0;
        for (int j = 0 ;Map[i][j];j++)
        {
            MapW++;
            if( Map[i][j] == '@' )
         {
            gotoxy(&j,&i);
            SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);   //Apple color
            cout << Map[i][j];
        }
        else if (Map[i][j]!=' ')
            {
                gotoxy(&j,&i);
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 150);    //Border color
                cout<<Map[i][j];
            }
        }
        MapH++;
    }
    for (int i =0 ;i<snake.size();i++)    //display snake
    {
        gotoxy(&snake[i].x,&snake[i].y);
        cout<<char (219);                 //Block that makes up the snake
    }
}

bool checkLose(int x, int y,vector <snakeBlock>&snake, int dif)
{
    if (Map[y][x]=='|' || Map[y][x] == '_')     //if the snake is touching the border then return lose
        return true;
    if (snake.size()>3)                         //Code to see if the snake is eating itself
    {
        for (int i = 3;i<snake.size();i++)
            if (snake[i].x==x&&snake[i].y==y)
                return true;
    }
    if (Map[y][x]=='@')                   //Code to randomly locate the apple after it is eaten
    {
        unsigned seed = time(0);
        srand(seed);
        Map[y][x]=' ';
        snakeBlock newSnake;
        for(int num = 0; num <= 1*dif; num++ )     //When the snake comes incontact with the apple then it will grow.
        {
            newSnake.x=snake[snake.size()-1].x;
            newSnake.y=snake[snake.size()-1].y;
            snake.push_back(newSnake); //The snake grows by having the amount of spaces it takes up on the board  be the amount of places that are in the newSnake vector.
            fileScore++;
        }
        int rx,ry;
        do{
            rx=rand()%MapW;
            ry=rand()%MapH;
        }while (checkLose(rx, ry,snake, dif));
        Map[ry][rx]='@';
        drawMap(snake);
    }
    return false;
}

void snakeInit(int x,int y ,vector<snakeBlock> &snake)
{
    snakeBlock newSnake;
    newSnake.x=x;
    newSnake.y=y;
    snake.push_back(newSnake);
}

//moves the snake
bool snakeMove(vector<snakeBlock>&snake,short dire[2],int dif)
{
    int oldx,oldy,x,y; //variables to hold where the snake is on the plane
    gotoxy(&snake[snake.size()-1].x,&snake[snake.size()-1].y);  //Sets the cursor to where the snake was
    cout<<" ";  //displays a blank space
    oldx=snake[0].x;  //finds the back of the snake
    oldy=snake[0].y;
    snake[0].x+=dire[0];  // horizontal location is changed based on the x value in dire
    snake[0].y+=dire[1];  // vertical location is changed based on the y value in dire
    gotoxy(&snake[0].x,&snake[0].y);  //Sets the cursor to where the snake will be
    cout<<char(219);                //Displays the block
    if (snake.size()>1)
    {
        for (int i = 1;i<snake.size();i++)// resets the values in each part of the snake vector to be correct with where the snake has moved to
        {
            x=snake[i].x;   //finds the x location of the head of the snake
            y=snake[i].y;   //finds the y location of the head of the snake
            snake[i].x=oldx;    //resets all of the locations back to the back of the old snake
            snake[i].y=oldy;
            oldx=x;         //sets the x and y location of the head to be the back
            oldy=y;
        }
    }
    if (checkLose(snake[0].x,snake[0].y,snake,dif))
        return true;
    return false;
}
//function that finds the difficulty
int chooseDif(int &difficulty)
{
    system("cls");
     char diff;
      cout <<  "                                                                      \n"
           <<  "                            Which difficulty?                         \n"
           <<  "                                                                      \n"
           <<  "                                                                      \n"
           <<  "                                A: Easy                               \n"
           <<  "                                                                      \n"
           <<  "                                B: Medium                             \n"
           <<  "                                                                      \n"
           <<  "                                C: Hard                               \n"
           <<  "                                                                      \n"
           <<  "                                "; cin.get(diff);
           while(diff!= 'A'&& diff!= 'a'&& diff!='B' &&diff!='b'&&diff!='C'&&diff!='c')
           {
                cout << "\nThat is not a valid difficulty. Please try again." << endl;
                cin >> diff;

           }

           if(diff == 'A' || diff == 'a')
           difficulty = 1;
           if(diff == 'B' || diff == 'b')
           difficulty = 2;
           if(diff == 'C' || diff == 'c')
           difficulty = 3;
           return difficulty;
}

           void titleScreen(char pressStart)  //Begining visual for player
{
      cout <<  " ___________________________________________________________________\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|            Davis and Oscar's Mega Cool Snake Game                 |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|               _____   ______     ______                           |\n"
           <<  "|              |       |      |   |      |   |                      |\n"
           <<  "|              |       |      |   |      |   |                      |\n"
           <<  "|              |       |      |   |      |   |                      |\n"
           <<  "|              |_____  |______|   |______|   |_____                 |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                   Press Enter key to Start                        |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|___________________________________________________________________|\n";
           cin.get(pressStart);

      cout << "Yeah you did It!" << endl;

}
int fileReader(int file)
{

    ofstream outputFile;
    ifstream inputFile;
    string name;
    inputFile.open("program.txt");
    outputFile.open("program.txt");
    inputFile >> fileScore;
    cout << fileScore << endl;
    outputFile.close();
    inputFile.close();
    return 0;
}
int filesSaveScore(int fileUn)
{

    ofstream outputFile;
    ifstream inputFile;
    inputFile.open("program.txt");
    outputFile.open("program.txt");
    outputFile << fileScore;
     outputFile.close();
     inputFile.close();
    cout << "done.\n";
    return 0;
}
int main()
{
    system("Color 0c");                 //Set color
    bool GameIsRunning=true;            //Set variable that tells when game is over
    char pressStart;                    //Variable that pauses the code
    titleScreen(pressStart);             //Show title
    int dif;                            //variable to hold difficulty
    chooseDif(dif);                     //function to find difficulty
    int GameSpeed=120/dif;              //Set gamespeed based on difficulty
    short dire[2]={0,1};                //Array to hold vertical and horizontal movement
    vector<snakeBlock> snake;           //Vector that holds data to represent
    snakeInit(1,1,snake);               //Create a snake
    drawMap(snake);                     //create the border, snake, and apple in the correct locations
    while (GameIsRunning)
    {
        if (GetAsyncKeyState(VK_UP))    //Movement up code
        {
            if (dire[1]==0)
            {
                dire[1]=-1;
                dire[0]=0;
            }

        }
        else if (GetAsyncKeyState(VK_DOWN))   //Movement down code
        {
            if (dire[1]==0)
            {
                dire[1]=1;
                dire[0]=0;
            }
        }
        else if (GetAsyncKeyState(VK_LEFT))   //Movement left code
        {
            if (dire[0]==0)
            {
                dire[1]=0;
                dire[0]=-1;
            }
        }
        else if (GetAsyncKeyState(VK_RIGHT))  //Movement right code
        {
            if (dire[0]==0)
            {
                dire[1]=0;
                dire[0]=1;
            }
        }
        if(snakeMove(snake,dire,dif))             //When the snake is dead stop the game
        {
          system("cls");
                cout <<  " ___________________________________________________________________\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n";
       cout << "|                       Final Score: " << fileScore << "                              |"  << '\n';
           cout <<  "|                                                                   |\n"
           <<  "|                        GAME OVER                                  |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|                                                                   |\n"
           <<  "|___________________________________________________________________|\n";
          system("pause");
          return 0;
        }
        Sleep(GameSpeed);
    }
}
